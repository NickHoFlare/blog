{"pageProps":{"post":{"title":"Hello World!","date":"2021-06-23T21:41:07.322Z","slug":"hello-world","author":{"name":"Nicholas Ho","picture":"/assets/blog/authors/Girdog.png"},"content":"<h2>Hello World!</h2>\n<p>You are now reading the first ever post of my dev (and perhaps occasionally other things) blog ü•≥</p>\n<p>My name is Nicholas, and I'm currently a Software Engineer at the Commonwealth Bank of Australia. Learning to write software is tough, and writing it well is even tougher.</p>\n<p>My objective in starting this blog is to provide an account of my learning journeys and sentiments on tech, and for me to see how far i've come. Perhaps someone will stumble across this at some point and even learn a thing or two from the mistakes i've made.</p>\n<h2>Straight to business...</h2>\n<p>A blog needs content, and what better way to christen a devblog than to talk about how this blog was set up!</p>\n<p>At work, i've primarily been working with apps built with Angular and ReactJS, with an ASP.NET back-end, of both the Framework and Core varieties. Personally, I feel much more at home working with back-end concepts, but I enjoy making the occasional foray into Front-end land.</p>\n<p>I've recently discovered the front-end framework <a href=\"https://nextjs.org/\">NextJS</a>, which is seemingly built on top of ReactJS, yet provides its own flavour to front-end development. A quick executive summary of my understanding of the biggest differences of the two are:</p>\n<ul>\n<li>React components/views are linked together via the use of React Router, whereas Next provides easy routing capability out of the box.</li>\n<li>Next accomodates several flavours of server-side rendering (SSR), such as\n<ul>\n<li>Static Generation: you get an entirely static site - data is fetched at <em>build time</em>, so there's no need to do work between requests for each page.</li>\n<li>Server-side rendering: As opposed to a React Single Page App (SPA)'s <em>client-side rendering (CSR)</em> where Javascript builds the HTML of a page up on the client, SSR is akin to the old-school way of fetching each entire standalone HTML page that has been fully rendered by the server</li>\n</ul>\n</li>\n<li>SSR allows the website to benefit from SEO, since HTML is available for web crawlers to peruse from the get-go, so it has access to all the site metadata etc, as opposed to client-side rendered sites, where such tags are not available on load.</li>\n</ul>\n<p>This article does a pretty great job at explaining the differences between CSR and SSR: https://www.toptal.com/front-end/client-side-vs-server-side-pre-rendering</p>\n<h2>Getting started</h2>\n<p>while poking around the documentation of Next.js, I discovered that while using create-next-app to scaffold a new application, you can define a template (there are very many) for the scaffolded app, which can be found on <a href=\"https://github.com/vercel/next.js/tree/canary/examples\">Github</a>.</p>\n<p>I saw that there was an example entry for a <a href=\"https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript\">\"blog starter\"</a> and got curious.</p>\n<p>This website that you are now reading this blogpost on was created using the aforementioned \"blog starter\" template. Minimal modification has been done to it, since it appears that all this scaffolded code produces a complete and functional static website, with blogposts written in Markdown. Pretty neat! Because I wanted this blog to be started with as little fuss as possible, I then decided to keep most of the innards of the scaffolded site as-is. Maybe I will make an attempt at creating my own website to host my blog at a later time. For now, this will do.</p>\n<h2>Hosting a static site</h2>\n<p>One of the first things I tried to do was to chuck the site onto <a href=\"https://pages.github.com/\">GitHub Pages</a>, where you can host static sites for free. Sounds too good to be true! Well.. yes and no.</p>\n<p>It's easy to <em>get started</em> with Pages, simply go to your repo's settings and flip the switch on. However, things did not \"just work\". As it turns out, Pages looks for the static files to be hosted on one of two locations - Root <code>/</code> or a Docs folder <code>/Docs</code>.</p>\n<p>My first thought was to naively create a <code>Docs</code> folder in the root level of the repo, and copy the exported website from a <code>next export</code> into the folder, but this method is very manual, and definitely not sustainable! However, I managed to get the site to show up using this method, but all the styles and images were missing, and all links were broken!</p>\n<p>After some digging, I found that the issue was that Github Pages had set up a basePath of <code>blog</code> for my site, but the app itself was not configured to account for this basePath - everything was still being delivered from root: <code>/</code> i.e.<code>/</code> for the homepage, <code>/posts</code> for the posts, as opposed to the expected <code>/blog</code> for the homepage and <code>/blog/posts</code> for posts. I needed to figure out a way to set up a basePath with Next!</p>\n<h2>Down the rabbit hole</h2>\n<p>I am tearing my hair off my head at this point! I Experienced many problems with setting up a basePath.</p>\n<p>First, I did some fiddling around with environment variables - I want the basepath to be applied only in Production mode, and not in development mode. Setting the <code>NODE_ENV</code> variable directly on my machine caused all sorts of hell to break loose, with archaic errors, the framework seemingly being unable to proceed past rendering beyond <code>_app.tsx</code>. Evidently, something in Next was relying on the value of <code>NODE_ENV</code>. Something was telling me that I was touching stuff that really shouldn't be tampered with!</p>\n<p>As it turns out, when running <code>npm run dev</code> i.e. <code>next</code>, it automatically set <code>NODE_ENV</code> to 'development', whereas when making a production build with <code>next build</code>, it builds it with <code>NODE_ENV</code> set to 'production' automatically. Likewise, running <code>next start</code> runs with <code>NODE_ENV</code> set as 'production'. This is really neat! I wish this was better documented though...</p>\n<p>Additionally, although I had read that a Next Config entry for <code>AssetPrefix</code> was required to fix the basepath for other assets including and images and other \"public\" files, for some reason, nothing in the <code>public</code> folder had the basePath applied to it. As a result, the app was in a state where all images were broken, and the favicon didn't show up.</p>\n<p>I had to resort to a workaround, which was to create a shared helper function <code>applyBasePathToImage</code> that transforms any URLs by appending the basePath to the front of it.</p>\n<p>We obtain the basePath by getting it as config from next.config.js. This is how you get config from a next.config.js:\n<a href=\"https://nextjs.org/docs/api-reference/next.config.js/runtime-configuration\">Runtime Configuration</a>.</p>\n<p>Essentially, it's as easy as plopping a <code>publicRuntimeConfig</code> into your <code>Next.config.js</code> and obtiaining the config value(s) like so:\n<code>const { publicRuntimeConfig } = getConfig();</code></p>\n<p>This introduced yet another issue - for some reason upon application of that function to a url, Next started complaining that it could not find the <code>fs</code> module (Node Filesystem), when it was plainly there, and being used successfully by other bits of code in the past.</p>\n<p>Following <a href=\"https://github.com/vercel/next.js/issues/7755#issuecomment-812805708\">this bug report</a>, I was able to resolve the <code>fs</code> issue. I can't say that I fully understand the reason why this works, but I suspect it has something to do with <code>fs</code> being invoked in client-side code, which is when it is not available. I'll have to read up on this a little more!</p>\n<h2>Deployment</h2>\n<p>Now that we understand how environment works in Next and are able to obtain its value at run-time, we finally have a working app from <code>/blog</code>! üéâüéä</p>\n<p>The next step is to figure out how to deploy it to Github Pages properly. I decided to use GitHub Actions as my CI/CD tool. It is free of charge to use and way powerful for a small project like this one.</p>\n<p>You can create an Actions Workflow by creating a .yaml file in the <code>.github/workflows</code> folder of your repo, following the format defined <a href=\"https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions\">here</a>.</p>\n<p>After a bit of stumbling, I managed to create a Github Actions workflow like so:</p>\n<pre><code class=\"language-yaml\">name: Build static Next.JS site\non: [push]\njobs:\n  Build-Static-Site:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"üéâ The job was automatically triggered by a ${{ github.event_name }} event.\"\n      - run: echo \"üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!\"\n      - run: echo \"üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.\"\n      \n      - name: Check out repository code\n        uses: actions/checkout@v2 # Default Github-provided action to checkout code from the repo\n      \n      - run: echo \"üí° The ${{ github.repository }} repository has been cloned to the runner.\"\n      - run: echo \"üñ•Ô∏è The workflow is now ready to test your code on the runner.\"\n      \n      # by default, we are plopped on the root directory of the repo.\n      # we have to change into the directory containing the app, and install our npm dependencies.\n      - name: Install NPM Packages \n        run: |\n          cd app\n          npm install\n\n      # build and export generates the static HTML files into ./out\n      # creating a .nojekyll file is necessary to prevent Jekyll from removing some essential files\n      - name: Build and publish static site \n        run: |\n          cd app\n          npm run build &#x26;&#x26; npm run export &#x26;&#x26; touch ./out/.nojekyll \n\n      # This action, created by James Ives takes the contents of a designated folder,\n      # and dumps it into the root of a branch of your choice.\n      # This makes it accessible for deployment to Github Pages!\n      - name: Deploy üöÄ\n        uses: JamesIves/github-pages-deploy-action@4.1.4\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: ./app/out # The folder the action should deploy.\n      \n      - run: echo \"üçè This job's status is ${{ job.status }}.\"\n</code></pre>\n<p>Some gotchas I encountered while figuring out how were</p>\n<ul>\n<li>Adding an empty .nojekyll file in my app's folder. This is important since GitHub Pages runs a Jekyll routine upon deployment, which will discard any files/folders that begin with _. Next.JS just so happens to place all Javascript files into a folder named _Next, which Jekyll deletes if the file is not present, which is behaviour we definitely do not want.</li>\n<li>Another was how to actually deploy the site properly to a root <code>/</code> or <code>/docs</code> location so that Pages could properly pick that up. Luckily, I stumbled upon this user-developed Github action https://github.com/JamesIves/github-pages-deploy-action that did the job painlessly and cleanly for me.</li>\n</ul>\n<p>I now have a workflow set up where every commit made (blog post added/updated, or edits to the site itself) triggers the Github Actions workflow to deploy the site with the newest changes/posts, completely automagically!</p>\n<p align=\"center\">\n  <img src=\"../public/assets/blog/hello-world/great-success.png\">\n</p>\n","ogImage":{"url":"/assets/blog/hello-world/cover.jpg"},"coverImage":"/assets/blog/hello-world/cover.jpg"}},"__N_SSG":true}